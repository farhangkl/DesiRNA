#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# from truth import truth
import sys
import math
import pandas as pd


AA_frequency_dic = {
    "0.0": 3289,
    "0.1": 5485,
    "0.2": 567,
    "0.3": 10,
    "0.4": 2,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 5485,
    "0.11": 5012,
    "0.12": 4220,
    "0.13": 2913,
    "0.14": 2509,
    "0.15": 2105,
    "0.16": 1686,
    "0.17": 1138,
    "0.18": 1167,
    "0.19": 759,
    "0.20": 567,
    "0.21": 430,
    "0.22": 293,
    "0.23": 179,
    "0.24": 153,
    "0.25": 100,
    "0.26": 102,
    "0.27": 38,
    "0.28": 30,
    "0.29": 54,
    "0.30": 10,
    "0.31": 15,
    "0.32": 11,
    "0.33": 8,
    "0.34": 3,
    "0.35": 2,
    "0.36": 0,
    "0.37": 1,
    "0.38": 0,
    "0.39": 0,
    "0.40": 2,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 1,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0": 0,
    "0.08": 6946,
    "0.09": 6376,
    "0.06": 8671,
    "0.04": 7685,
    "0.02": 4585,
    "0.07": 7893,
    "0.03": 5936,
    "0.01": 2362,
    "0.05": 7023,
    "1.00": 1,
    "1.0": 1,
}
AC_frequency_dic = {
    "0.0": 0,
    "0.1": 1944,
    "0.2": 0,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 1944,
    "0.11": 1289,
    "0.12": 468,
    "0.13": 230,
    "0.14": 93,
    "0.15": 41,
    "0.16": 19,
    "0.17": 13,
    "0.18": 1,
    "0.19": 2,
    "0.20": 0,
    "0.21": 0,
    "0.22": 0,
    "0.23": 0,
    "0.24": 0,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.07": 9930,
    "0.08": 6211,
    "0.04": 15288,
    "0.06": 13881,
    "0.09": 3887,
    "0.05": 15189,
    "0.03": 11230,
    "0.00": 2669,
    "0.02": 5217,
    "0.01": 2157,
    "1.00": 1,
    "1.0": 1,
}
AG_frequency_dic = {
    "0.0": 0,
    "0.1": 6151,
    "0.2": 21,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 6151,
    "0.11": 3552,
    "0.12": 2459,
    "0.13": 1073,
    "0.14": 807,
    "0.15": 545,
    "0.16": 295,
    "0.17": 206,
    "0.18": 125,
    "0.19": 38,
    "0.20": 21,
    "0.21": 15,
    "0.22": 4,
    "0.23": 20,
    "0.24": 2,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.04": 8502,
    "0.05": 10304,
    "0.07": 12423,
    "0.08": 11600,
    "0.03": 4958,
    "0.06": 13057,
    "0.02": 2997,
    "0.09": 8147,
    "0.01": 939,
    "0.00": 1519,
    "1.00": 1,
    "1.0": 1,
}
AU_frequency_dic = {
    "0.0": 0,
    "0.1": 3976,
    "0.2": 133,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 3976,
    "0.11": 2984,
    "0.12": 2205,
    "0.13": 1228,
    "0.14": 963,
    "0.15": 606,
    "0.16": 518,
    "0.17": 330,
    "0.18": 287,
    "0.19": 219,
    "0.20": 133,
    "0.21": 83,
    "0.22": 61,
    "0.23": 44,
    "0.24": 13,
    "0.25": 13,
    "0.26": 2,
    "0.27": 4,
    "0.28": 2,
    "0.29": 2,
    "0.30": 0,
    "0.31": 0,
    "0.32": 2,
    "0.33": 2,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.06": 10031,
    "0.04": 11048,
    "0.08": 6997,
    "0.05": 9344,
    "0.01": 3627,
    "0.07": 8370,
    "0.09": 5639,
    "0.02": 7129,
    "0.00": 4121,
    "0.03": 9776,
    "1.00": 1,
    "1.0": 1,
}

CA_frequency_dic = {
    "0.0": 0,
    "0.1": 3510,
    "0.2": 2,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 3510,
    "0.11": 1907,
    "0.12": 1077,
    "0.13": 353,
    "0.14": 165,
    "0.15": 87,
    "0.16": 25,
    "0.17": 5,
    "0.18": 7,
    "0.19": 4,
    "0.20": 2,
    "0.21": 1,
    "0.22": 0,
    "0.23": 0,
    "0.24": 0,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.05": 13616,
    "0.08": 9108,
    "0.07": 12233,
    "0.06": 15752,
    "0.03": 7398,
    "0.09": 5839,
    "0.04": 11864,
    "0.02": 3651,
    "0.01": 1534,
    "0.00": 1621,
    "1.00": 1,
    "1.0": 1,
}
CC_frequency_dic = {
    "0.0": 0,
    "0.1": 4000,
    "0.2": 177,
    "0.3": 6,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 4000,
    "0.11": 3296,
    "0.12": 2341,
    "0.13": 1754,
    "0.14": 1232,
    "0.15": 860,
    "0.16": 640,
    "0.17": 452,
    "0.18": 291,
    "0.19": 228,
    "0.20": 177,
    "0.21": 99,
    "0.22": 78,
    "0.23": 51,
    "0.24": 32,
    "0.25": 11,
    "0.26": 21,
    "0.27": 9,
    "0.28": 7,
    "0.29": 2,
    "0.30": 6,
    "0.31": 3,
    "0.32": 1,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.02": 6778,
    "0.04": 10069,
    "0.03": 10182,
    "0.05": 9412,
    "0.06": 10281,
    "0.01": 3632,
    "0.08": 6699,
    "0.09": 5223,
    "0.00": 4191,
    "0.07": 7701,
    "1.00": 1,
    "1.0": 1,
}
CG_frequency_dic = {
    "0.0": 0,
    "0.1": 3835,
    "0.2": 207,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 3835,
    "0.11": 2763,
    "0.12": 2141,
    "0.13": 1322,
    "0.14": 973,
    "0.15": 742,
    "0.16": 424,
    "0.17": 351,
    "0.18": 239,
    "0.19": 161,
    "0.20": 207,
    "0.21": 82,
    "0.22": 90,
    "0.23": 21,
    "0.24": 27,
    "0.25": 5,
    "0.26": 3,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.04": 10065,
    "0.09": 4543,
    "0.07": 6541,
    "0.08": 5699,
    "0.05": 7940,
    "0.03": 10060,
    "0.06": 8305,
    "0.02": 7354,
    "0.00": 8434,
    "0.01": 7432,
    "1.00": 1,
    "1.0": 1,
}
CU_frequency_dic = {
    "0.0": 0,
    "0.1": 0,
    "0.2": 0,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 3247,
    "0.11": 1926,
    "0.12": 1307,
    "0.13": 567,
    "0.14": 274,
    "0.15": 171,
    "0.16": 197,
    "0.17": 45,
    "0.18": 15,
    "0.19": 5,
    "0.20": 4,
    "0.21": 2,
    "0.22": 0,
    "0.23": 0,
    "0.24": 0,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.04": 12774,
    "0.05": 13151,
    "0.03": 9241,
    "0.02": 5434,
    "0.06": 13901,
    "0.07": 10773,
    "0.00": 1599,
    "0.08": 7893,
    "0.09": 5731,
    "0.01": 1502,
    "1.00": 1,
    "1.0": 1,
}

GA_frequency_dic = {
    "0.0": 0,
    "0.1": 6116,
    "0.2": 14,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 6116,
    "0.11": 4217,
    "0.12": 2718,
    "0.13": 1275,
    "0.14": 746,
    "0.15": 544,
    "0.16": 156,
    "0.17": 107,
    "0.18": 67,
    "0.19": 37,
    "0.20": 14,
    "0.21": 4,
    "0.22": 1,
    "0.23": 4,
    "0.24": 2,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.05": 10307,
    "0.07": 12358,
    "0.08": 10896,
    "0.04": 8180,
    "0.06": 13029,
    "0.03": 5446,
    "0.02": 2996,
    "0.09": 8483,
    "0.01": 930,
    "0.00": 1126,
    "1.00": 1,
    "1.0": 1,
}
GC_frequency_dic = {
    "0.0": 0,
    "0.1": 4742,
    "0.2": 51,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 4742,
    "0.11": 3748,
    "0.12": 2723,
    "0.13": 1501,
    "0.14": 1028,
    "0.15": 826,
    "0.16": 497,
    "0.17": 327,
    "0.18": 127,
    "0.19": 107,
    "0.20": 51,
    "0.21": 24,
    "0.22": 5,
    "0.23": 4,
    "0.24": 0,
    "0.25": 0,
    "0.26": 3,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.07": 9288,
    "0.05": 9831,
    "0.04": 9438,
    "0.09": 6333,
    "0.06": 12055,
    "0.08": 8603,
    "0.02": 4770,
    "0.00": 2473,
    "0.03": 8580,
    "0.01": 2675,
    "1.00": 1,
    "1.0": 1,
}
GG_frequency_dic = {
    "0.0": 0,
    "0.1": 5993,
    "0.2": 340,
    "0.3": 2,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 5993,
    "0.11": 5044,
    "0.12": 5266,
    "0.13": 2792,
    "0.14": 2306,
    "0.15": 1633,
    "0.16": 1213,
    "0.17": 959,
    "0.18": 591,
    "0.19": 435,
    "0.20": 340,
    "0.21": 151,
    "0.22": 111,
    "0.23": 59,
    "0.24": 36,
    "0.25": 54,
    "0.26": 81,
    "0.27": 14,
    "0.28": 19,
    "0.29": 13,
    "0.30": 2,
    "0.31": 13,
    "0.32": 1,
    "0.33": 13,
    "0.34": 0,
    "0.35": 0,
    "0.36": 5,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.03": 6399,
    "0.05": 7713,
    "0.06": 9640,
    "0.04": 7617,
    "0.02": 3877,
    "0.07": 7989,
    "0.08": 7898,
    "0.09": 7487,
    "0.01": 2262,
    "0.00": 1733,
    "1.00": 1,
    "1.0": 1,
}
GU_frequency_dic = {
    "0.0": 0,
    "0.1": 3267,
    "0.2": 1,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 3267,
    "0.11": 1948,
    "0.12": 1237,
    "0.13": 378,
    "0.14": 200,
    "0.15": 78,
    "0.16": 37,
    "0.17": 13,
    "0.18": 3,
    "0.19": 2,
    "0.20": 1,
    "0.21": 2,
    "0.22": 0,
    "0.23": 0,
    "0.24": 0,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.07": 12554,
    "0.04": 11014,
    "0.08": 8885,
    "0.06": 15252,
    "0.05": 13272,
    "0.09": 5592,
    "0.02": 4522,
    "0.03": 8391,
    "0.01": 1414,
    "0.00": 1697,
    "1.00": 1,
    "1.0": 1,
}

UA_frequency_dic = {
    "0.0": 0,
    "0.1": 3013,
    "0.2": 50,
    "0.3": 1,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 3013,
    "0.11": 2314,
    "0.12": 1774,
    "0.13": 953,
    "0.14": 653,
    "0.15": 496,
    "0.16": 302,
    "0.17": 194,
    "0.18": 120,
    "0.19": 76,
    "0.20": 50,
    "0.21": 34,
    "0.22": 11,
    "0.23": 6,
    "0.24": 7,
    "0.25": 0,
    "0.26": 0,
    "0.27": 4,
    "0.28": 2,
    "0.29": 1,
    "0.30": 1,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.06": 9904,
    "0.07": 7383,
    "0.02": 8760,
    "0.03": 10127,
    "0.05": 9858,
    "0.04": 11693,
    "0.09": 4468,
    "0.01": 5325,
    "0.08": 5740,
    "0.00": 6490,
    "1.00": 1,
    "1.0": 1,
}
UC_frequency_dic = {
    "0.0": 0,
    "0.1": 2755,
    "0.2": 0,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 2755,
    "0.11": 1333,
    "0.12": 707,
    "0.13": 330,
    "0.14": 184,
    "0.15": 60,
    "0.16": 40,
    "0.17": 25,
    "0.18": 5,
    "0.19": 4,
    "0.20": 0,
    "0.21": 1,
    "0.22": 1,
    "0.23": 4,
    "0.24": 0,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 0,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.04": 15078,
    "0.03": 10347,
    "0.07": 10211,
    "0.08": 6731,
    "0.06": 13520,
    "0.05": 14211,
    "0.02": 5690,
    "0.09": 4556,
    "0.01": 2040,
    "0.00": 1926,
    "1.00": 1,
    "1.0": 1,
}
UG_frequency_dic = {
    "0.0": 0,
    "0.1": 6022,
    "0.2": 22,
    "0.3": 0,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 6022,
    "0.11": 4033,
    "0.12": 2837,
    "0.13": 1439,
    "0.14": 966,
    "0.15": 841,
    "0.16": 554,
    "0.17": 149,
    "0.18": 105,
    "0.19": 78,
    "0.20": 22,
    "0.21": 23,
    "0.22": 2,
    "0.23": 1,
    "0.24": 2,
    "0.25": 0,
    "0.26": 0,
    "0.27": 0,
    "0.28": 0,
    "0.29": 0,
    "0.30": 0,
    "0.31": 1,
    "0.32": 0,
    "0.33": 0,
    "0.34": 0,
    "0.35": 0,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.07": 12505,
    "0.05": 10090,
    "0.08": 10589,
    "0.04": 7919,
    "0.06": 13294,
    "0.02": 2836,
    "0.09": 8210,
    "0.03": 5144,
    "0.01": 578,
    "0.00": 1519,
    "1.00": 1,
    "1.0": 1,
}
UU_frequency_dic = {
    "0.0": 0,
    "0.1": 4304,
    "0.2": 309,
    "0.3": 6,
    "0.4": 0,
    "0.5": 0,
    "0.6": 0,
    "0.7": 0,
    "0.8": 0,
    "0.9": 0,
    "0.10": 4304,
    "0.11": 3843,
    "0.12": 3191,
    "0.13": 2228,
    "0.14": 1877,
    "0.15": 1426,
    "0.16": 1108,
    "0.17": 823,
    "0.18": 528,
    "0.19": 312,
    "0.20": 309,
    "0.21": 224,
    "0.22": 163,
    "0.23": 93,
    "0.24": 54,
    "0.25": 35,
    "0.26": 25,
    "0.27": 16,
    "0.28": 13,
    "0.29": 18,
    "0.30": 6,
    "0.31": 2,
    "0.32": 2,
    "0.33": 1,
    "0.34": 0,
    "0.35": 1,
    "0.36": 0,
    "0.37": 0,
    "0.38": 0,
    "0.39": 0,
    "0.40": 0,
    "0.41": 0,
    "0.42": 0,
    "0.43": 0,
    "0.44": 0,
    "0.45": 0,
    "0.46": 0,
    "0.47": 0,
    "0.48": 0,
    "0.49": 0,
    "0.50": 0,
    "0.51": 0,
    "0.52": 0,
    "0.53": 0,
    "0.54": 0,
    "0.55": 0,
    "0.56": 0,
    "0.57": 0,
    "0.58": 0,
    "0.59": 0,
    "0.60": 0,
    "0.61": 0,
    "0.62": 0,
    "0.63": 0,
    "0.64": 0,
    "0.65": 0,
    "0.66": 0,
    "0.67": 0,
    "0.68": 0,
    "0.69": 0,
    "0.70": 0,
    "0.71": 0,
    "0.72": 0,
    "0.73": 0,
    "0.74": 0,
    "0.75": 0,
    "0.76": 0,
    "0.77": 0,
    "0.78": 0,
    "0.79": 0,
    "0.80": 0,
    "0.81": 0,
    "0.82": 0,
    "0.83": 0,
    "0.84": 0,
    "0.85": 0,
    "0.86": 0,
    "0.87": 0,
    "0.88": 0,
    "0.89": 0,
    "0.90": 0,
    "0.91": 0,
    "0.92": 0,
    "0.93": 0,
    "0.94": 0,
    "0.95": 0,
    "0.96": 0,
    "0.97": 0,
    "0.98": 0,
    "0.99": 0,
    "0.07": 7084,
    "0.05": 7914,
    "0.09": 5290,
    "0.04": 9897,
    "0.08": 6479,
    "0.00": 4713,
    "0.02": 7435,
    "0.06": 8305,
    "0.03": 8395,
    "0.01": 3645,
    "1.00": 1,
    "1.0": 1,
}

AA_MAX = 430
AC_MAX = 1289
AG_MAX = 545
AU_MAX = 287

AA_UPPER_BAND = 0.49
AC_UPPER_BAND = 0.19
AG_UPPER_BAND = 0.24
AU_UPPER_BAND = 0.33

# AA_THRESHOLD=21
AA_THRESHOLD = 0.21
# No. of sequnces=960
AC_THRESHOLD = 0.11
# No. of sequnces=1459

AG_THRESHOLD = 0.15
# No. of sequnces=1252

AU_THRESHOLD = 0.18
# No. of sequnces=1285

CA_MAX = 1077
CC_MAX = 452
CG_MAX = 351
CU_MAX = 567

CA_UPPER_BAND = 0.20
CC_UPPER_BAND = 0.32
CG_UPPER_BAND = 0.26
CU_UPPER_BAND = 0.21

# AA_THRESHOLD=21
CA_THRESHOLD = 0.13
# No. of sequnces=649
CC_THRESHOLD = 0.18
# No. of sequnces=1015

CG_THRESHOLD = 0.16
# No. of sequnces=855

CU_THRESHOLD = 0.14
# No. of sequnces=713


GA_MAX = 746
GC_MAX = 826
GG_MAX = 435
GU_MAX = 1237

GA_UPPER_BAND = 0.24
GC_UPPER_BAND = 0.26
GG_UPPER_BAND = 0.36
GU_UPPER_BAND = 0.21

GA_THRESHOLD = 0.15
# No. of sequnces=936
GC_THRESHOLD = 0.16
# No. of sequnGes=1141

GG_THRESHOLD = 0.19
# No. of sequnces=912

GU_THRESHOLD = 0.13
# No. of sequnces=715


UA_MAX = 496
UC_MAX = 1333
UG_MAX = 841
UU_MAX = 312

UA_UPPER_BAND = 0.30
UC_UPPER_BAND = 0.23
UG_UPPER_BAND = 0.31
UU_UPPER_BAND = 0.35

UA_THRESHOLD = 0.16
# No. of sequnces=1002
UC_THRESHOLD = 0.12
# No. of sequnGes=1361

UG_THRESHOLD = 0.16
# No. of sequnces=917

UU_THRESHOLD = 0.20
# No. of sequnces=962
AA_Penalty = []
AC_Penalty = []
AG_Penalty = []
AU_Penalty = []

CA_Penalty = []
CC_Penalty = []
CG_Penalty = []
CU_Penalty = []

GA_Penalty = []
GC_Penalty = []
GG_Penalty = []
GU_Penalty = []

UA_Penalty = []
UC_Penalty = []
UG_Penalty = []
UU_Penalty = []


def nucleotide_combinations(sequence):
    combinations_dict = {}

    for nucleotide in range(len(sequence) - 1):
        combination = sequence[nucleotide] + sequence[nucleotide + 1]

        if combination not in combinations_dict.keys():
            combinations_dict[combination] = 0
        if combination in combinations_dict.keys():
            combinations_dict[combination] = combinations_dict[combination] + 1

    return combinations_dict


def get_sequence(df, row):
    columns = df.columns
    seq_col = columns[0]
    sequence = df[seq_col][row]

    return sequence


class DiNucCounter:
    def __init__(self, input_csv_file):
        self.input_csv = input_csv_file
        print(self.input_csv)
        self.df = pd.read_csv(self.input_csv, index_col=False, header=None)

    def add_di_nuc_df(self):
        comb_list = [
            "AA",
            "AC",
            "AG",
            "AU",
            "CA",
            "CC",
            "CG",
            "CU",
            "GA",
            "GC",
            "GG",
            "GU",
            "UA",
            "UC",
            "UG",
            "UU",
        ]
        for i in comb_list:
            self.df[i] = "0"

    def di_nuc_calculator(self):
        for i in range(len(self.df)):
            sequence = get_sequence(self.df, i)
            combinations_dict = nucleotide_combinations(sequence)
            for key in combinations_dict.keys():
                self.df.loc[i, key] = round(
                    float(combinations_dict[key]) / (len(sequence) - 1), 2
                )

    def df_to_file(self):
        headers = [
            "sequence",
            "mcc/pscore",
            "prob_score",
            "AA",
            "AC",
            "AG",
            "AU",
            "CA",
            "CC",
            "CG",
            "CU",
            "GA",
            "GC",
            "GG",
            "GU",
            "UA",
            "UC",
            "UG",
            "UU",
        ]
        self.df.columns = headers
        # df.columns.values[0:2] =["name", "address" ]
        print(self.df)
        self.df.to_csv(self.input_csv, index=False)


class DiNuc_penalty_applier:
    def __init__(self, input_csv_file):
        self.input_csv = input_csv_file
        self.df = pd.read_csv(self.input_csv, delimiter=",")
        df_nuc = self.df[
            [
                "AA",
                "AC",
                "AG",
                "AU",
                "CA",
                "CC",
                "CG",
                "GA",
                "GC",
                "GG",
                "GU",
                "CU",
                "UA",
                "UC",
                "UG",
                "UU",
            ]
        ]
        df_out = pd.DataFrame()
        for index, row in df_nuc.iterrows():
            if float(row["AA"]) < AA_THRESHOLD:
                AA_Penalty.append("0")
            elif float(row["AA"]) <= AA_UPPER_BAND:
                AA_Penalty.append(
                    round(
                        (1 - min(1, (AA_frequency_dic[str(row["AA"])] / AC_MAX)))
                        * 2.718 ** float(row["AA"]),
                        3,
                    )
                )
            else:
                AA_Penalty.append(round(2.718 ** row["AA"], 5))

            if float(row["AC"]) < AC_THRESHOLD:
                AC_Penalty.append("0")
            elif float(row["AC"]) < AC_UPPER_BAND:
                # print((1-min(1,(CA_frequency_dic[str(row['CA'])]/CA_MAX)))*2.718**float(row['CA']))
                AC_Penalty.append(
                    round(
                        (1 - min(1, (AC_frequency_dic[str(row["AC"])] / AC_MAX)))
                        * 2.718 ** float(row["AC"]),
                        3,
                    )
                )
            else:
                AC_Penalty.append(round(2.718 ** row["AC"], 5))

            if float(row["AG"]) < AG_THRESHOLD:
                AG_Penalty.append("0")
            elif float(row["AG"]) <= AG_UPPER_BAND:
                AG_Penalty.append(
                    round(
                        (1 - min(1, (AG_frequency_dic[str(row["AG"])] / AG_MAX)))
                        * 2.718 ** float(row["AG"]),
                        3,
                    )
                )
            else:
                AG_Penalty.append(round(2.718 ** row["AG"], 5))

            if float(row["AU"]) < AU_THRESHOLD:
                AU_Penalty.append("0")
            elif float(row["AU"]) <= AU_UPPER_BAND:
                AU_Penalty.append(
                    round(
                        (1 - min(1, (AU_frequency_dic[str(row["AU"])] / AU_MAX)))
                        * 2.718 ** float(row["AU"]),
                        3,
                    )
                )
            else:
                AU_Penalty.append(round(2.718 ** row["AU"], 5))

            if float(row["CA"]) < CA_THRESHOLD:
                CA_Penalty.append("0")
            elif float(row["CA"]) <= CA_UPPER_BAND:
                CA_Penalty.append(
                    round(
                        (1 - min(1, (CA_frequency_dic[str(row["CA"])] / CA_MAX)))
                        * 2.718 ** float(row["CA"]),
                        3,
                    )
                )
            else:
                CA_Penalty.append(round(2.718 ** row["CA"], 5))

            if float(row["CC"]) < CC_THRESHOLD:
                CC_Penalty.append("0")
            elif float(row["CC"]) <= CC_UPPER_BAND:
                # print((1-min(1,(CC_frequency_dic[str(row['CC'])]/CC_MAX)))*2.718**float(row['CC']))
                CC_Penalty.append(
                    round(
                        (1 - min(1, (CC_frequency_dic[str(row["CC"])] / CC_MAX)))
                        * 2.718 ** float(row["CC"]),
                        3,
                    )
                )
            else:
                CC_Penalty.append(round(2.718 ** row["CC"], 5))

            if float(row["CG"]) < CG_THRESHOLD:
                CG_Penalty.append("0")
            elif float(row["CG"]) <= CG_UPPER_BAND:
                num1 = 1 - min(1, (CG_frequency_dic[str(row["CG"])]) / CG_MAX)
                num2 = 2.718 ** row["CG"]
                CG_Penalty.append(num1 * num2)
            else:
                CG_Penalty.append(round(2.718 ** row["CG"], 5))

            if float(row["CU"]) < CU_THRESHOLD:
                CU_Penalty.append("0")
            elif float(row["CU"]) <= CU_UPPER_BAND:
                CU_Penalty.append(
                    round(
                        (1 - min(1, (CU_frequency_dic[str(row["CU"])] / CU_MAX)))
                        * 2.718 ** float(row["CU"]),
                        3,
                    )
                )
            else:
                CU_Penalty.append(round(2.718 ** row["CU"], 5))

            if float(row["GA"]) < GA_THRESHOLD:
                GA_Penalty.append("0")
            elif float(row["GA"]) <= GA_UPPER_BAND:
                GA_Penalty.append(
                    round(
                        (1 - min(1, (GA_frequency_dic[str(row["GA"])] / GA_MAX)))
                        * 2.718 ** float(row["GA"]),
                        3,
                    )
                )
            else:
                GA_Penalty.append(round(2.718 ** row["GA"], 5))

            if float(row["GC"]) < GC_THRESHOLD:
                GC_Penalty.append("0")
            elif float(row["GC"]) <= GC_UPPER_BAND:
                GC_Penalty.append(
                    round(
                        (1 - min(1, (GC_frequency_dic[str(row["GC"])] / GC_MAX)))
                        * 2.718 ** float(row["GC"]),
                        3,
                    )
                )
            else:
                GC_Penalty.append(round(2.718 ** row["GC"], 5))

            if float(row["GG"]) < GG_THRESHOLD:
                GG_Penalty.append("0")
            elif float(row["GG"]) <= GG_UPPER_BAND:
                GG_Penalty.append(
                    round(
                        (1 - min(1, (GG_frequency_dic[str(row["GG"])] / GG_MAX)))
                        * 2.718 ** float(row["GG"]),
                        3,
                    )
                )
            else:
                GG_Penalty.append(round(2.718 ** row["GG"], 5))

            if float(row["GU"]) < GU_THRESHOLD:
                GU_Penalty.append("0")
            elif float(row["GU"]) <= GU_UPPER_BAND:
                GU_Penalty.append(
                    round(
                        (1 - min(1, (GU_frequency_dic[str(row["GU"])] / GU_MAX)))
                        * 2.718 ** float(row["GU_Penalty"]),
                        3,
                    )
                )
            else:
                GU_Penalty.append(round(2.718 ** row["GU"], 5))

            if float(row["UA"]) < UA_THRESHOLD:
                UA_Penalty.append("0")
            elif float(row["UA"]) <= UA_UPPER_BAND:
                UA_Penalty.append(
                    round(
                        (1 - min(1, (UA_frequency_dic[str(row["UA"])] / UA_MAX)))
                        * 2.718 ** float(row["UA"]),
                        3,
                    )
                )
            else:
                UA_Penalty.append(round(2.718 ** row["UA"], 5))

            if float(row["UC"]) < UC_THRESHOLD:
                UC_Penalty.append("0")
            elif float(row["UC"]) <= UC_UPPER_BAND:
                # print((1-min(1,(UC_frequency_dic[str(row['UC'])]/UC_MAX)))*2.718**float(row['UC']))
                UC_Penalty.append(
                    round(
                        (1 - min(1, (UC_frequency_dic[str(row["UC"])] / UC_MAX)))
                        * 2.718 ** float(row["UC"]),
                        3,
                    )
                )
            else:
                UC_Penalty.append(round(2.718 ** row["UC"], 5))

            if float(row["UG"]) < UG_THRESHOLD:
                UG_Penalty.append("0")
            elif float(row["UG"]) <= UG_UPPER_BAND:
                UG_Penalty.append(
                    round(
                        (1 - min(1, (UA_frequency_dic[str(row["UA"])] / UA_MAX)))
                        * 2.718 ** float(row["UA"]),
                        3,
                    )
                )
            else:
                UG_Penalty.append(round(2.718 ** row["UG"], 5))

            if float(row["UU"]) < UU_THRESHOLD:
                UU_Penalty.append("0")
            elif float(row["UU"]) <= UU_UPPER_BAND:
                UU_Penalty.append(
                    round(
                        (1 - min(1, (UU_frequency_dic[str(row["UU"])] / UU_MAX)))
                        * 2.718 ** float(row["UU"]),
                        3,
                    )
                )
            else:
                UU_Penalty.append(round(2.718 ** row["UU"], 5))

        zipped_lists = zip(
            AA_Penalty,
            AU_Penalty,
            AC_Penalty,
            AG_Penalty,
            GA_Penalty,
            GC_Penalty,
            GG_Penalty,
            GU_Penalty,
            CA_Penalty,
            CC_Penalty,
            CG_Penalty,
            CU_Penalty,
            UA_Penalty,
            UC_Penalty,
            UG_Penalty,
            UU_Penalty,
        )
        sum_1 = []
        sum_1 = [
            float(a)
            + float(b)
            + float(c)
            + float(d)
            + float(e)
            + float(f)
            + float(g)
            + float(h)
            + float(i)
            + float(j)
            + float(k)
            + float(l)
            + float(m)
            + float(n)
            + float(o)
            + float(p)
            for (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) in zipped_lists
        ]

        self.df["AA_Penalty"] = AA_Penalty
        self.df["AC_Penalty"] = AC_Penalty
        self.df["AG_Penalty"] = AG_Penalty
        self.df["AU_Penalty"] = AU_Penalty
        self.df["GA_Penalty"] = GA_Penalty
        self.df["GC_Penalty"] = GC_Penalty
        self.df["GG_Penalty"] = GG_Penalty
        self.df["GU_Penalty"] = GU_Penalty
        self.df["CA_Penalty"] = CA_Penalty
        self.df["CC_Penalty"] = CC_Penalty
        self.df["CG_Penalty"] = CG_Penalty
        self.df["CU_Penalty"] = CU_Penalty
        self.df["UA_Penalty"] = UA_Penalty
        self.df["UC_Penalty"] = UC_Penalty
        self.df["UG_Penalty"] = UG_Penalty
        self.df["UU_Penalty"] = UU_Penalty
        self.df["Total_Penalty"] = sum_1
        self.df.to_csv(self.input_csv, index=False)


if __name__ == "__main__":
    di_nuc = DiNucCounter("init.csv")
    di_nuc.add_di_nuc_df()
    di_nuc.di_nuc_calculator()
    di_nuc.df_to_file()
    class_penalty = DiNuc_penalty_applier("init.csv")
